{"version":3,"sources":["components/Calendar/Calendar.js","components/EventModal/EventModal.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","calendarComponentRef","React","createRef","handleDateClick","arg","props","changeDate","dateStr","className","dateClick","this","eventClick","event","updateEvent","defaultView","ref","header","left","center","right","slotLabelFormat","hour","minute","omitZeroMinute","meridiem","hour12","plugins","dayGridPlugin","interactionPlugin","events","eventTimeFormat","Component","EventModal","onChange","input","prevEvent","state","target","value","id","setState","handleAddUpdateEvent","e","status","preventDefault","title","start","moment","format","end","startTime","endTime","people","location","description","allDay","addEvent","closeModal","handleClose","bind","Modal","size","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Form","onSubmit","Object","keys","length","Group","as","Row","controlId","Label","column","sm","Col","Control","required","type","placeholder","align","Button","variant","Footer","onClick","deleteEvent","App","getTime","date","getDate","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","uuidv4","getEvents","Date","newEvents","filter","eventId","loadEvent","prepareEventUpdate","currentEvent","forEach","isBefore","isAfter","isSame","slice","push","today","handleShow","getItem","parse","Container","fluid","md","Navbar","expand","bg","Brand","href","xs","lg","xl","getDay","getMonth","ListGroup","map","i","Item","key","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4ebd8f2.chunk.js","sourcesContent":["import FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport './Calendar.scss';\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// TO DO\r\n// If you need to add arrows on the side of the calendar\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Calendar extends Component {\r\n    static propTypes = {\r\n        props: PropTypes.object\r\n    }\r\n    calendarComponentRef = React.createRef();\r\n\r\n    handleDateClick = (arg) => {\r\n        //Get all the events for the date that was clicked\r\n        this.props.changeDate(arg.dateStr);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"calendar-container\">\r\n                {/* <FontAwesomeIcon icon={faChevronLeft} size=\"5x\" /> */}\r\n                <FullCalendar\r\n                    dateClick={this.handleDateClick}\r\n                    //get the event that is about to be updated\r\n                    eventClick={({ event }) => this.props.updateEvent(event)}\r\n                    defaultView=\"dayGridMonth\"\r\n                    ref={this.calendarComponentRef}\r\n                    header={{\r\n                        left: 'prev',\r\n                        center: 'title',\r\n                        right: 'today , next'\r\n                    }}\r\n                    slotLabelFormat={\r\n                        {\r\n                            hour: '2-digit',\r\n                            minute: '2-digit',\r\n                            omitZeroMinute: false,\r\n                            meridiem: 'narrow',\r\n                            hour12: true\r\n                        }\r\n                    }\r\n                    // timeFormat='h:mm'\r\n                    plugins={[dayGridPlugin, interactionPlugin]}\r\n                    events={this.props.events != null ? this.props.events : \"\"}\r\n                    eventTimeFormat={{\r\n                        hour: '2-digit', //2-digit, numeric\r\n                        minute: '2-digit', //2-digit, numeric\r\n                        omitZeroMinute: true,\r\n                        meridiem: 'narrow',\r\n                        // second: '0-digit', //2-digit, numeric\r\n                        // meridiem: false, //lowercase, short, narrow, false (display of AM/PM)\r\n                        hour12: false //true, false\r\n                    }}\r\n                />\r\n                {/* <FontAwesomeIcon icon={faChevronRight} size=\"5x\" /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Calendar;","import React, { Component } from 'react'\r\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\r\n// there is a findDomNode warning that needs to be fixed\r\nimport * as moment from 'moment';\r\n\r\nclass EventModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            event: {\r\n                title: \"\",\r\n                start: '',\r\n                end: '',\r\n                startTime: '',\r\n                endTime: '',\r\n                people: '',\r\n                location: '',\r\n                description: ''\r\n            }\r\n        }\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (Object.keys(props.event).length !== 0) {\r\n            return { event: props.event };\r\n        }\r\n        return state;\r\n    }\r\n    onChange = input => {\r\n        const prevEvent = this.state.event;\r\n        const { value, id } = input.target;\r\n        prevEvent[id] = value;\r\n        this.setState({\r\n            event: prevEvent\r\n        })\r\n\r\n    }\r\n    handleAddUpdateEvent = (e, status) => {\r\n        e.preventDefault();\r\n        const title = e.target.title.value;\r\n        let start = moment(e.target.start.value).format('YYYY-MM-DD');\r\n        let end = moment(e.target.end.value).format('YYYY-MM-DD');\r\n        const startTime = e.target.startTime.value;\r\n        const endTime = e.target.endTime.value;\r\n        const people = e.target.people.value;\r\n        const location = e.target.location.value;\r\n        const description = e.target.description.value;\r\n        if (startTime) {\r\n            start += `T${startTime}`;\r\n        }\r\n        if (endTime) {\r\n            end += `T${endTime}`;\r\n        }\r\n        const event = {\r\n            title,\r\n            start,\r\n            end,\r\n            people,\r\n            location,\r\n            description,\r\n            allDay: false\r\n        }\r\n        if (startTime === \"\" || endTime === \"\") {\r\n            event.allDay = true;\r\n        }\r\n        //if status===false add new event otherwise update\r\n        if (!status) {\r\n            this.props.addEvent(event);\r\n        } else {\r\n            this.props.updateEvent(event);\r\n        }\r\n        this.closeModal();\r\n    }\r\n    closeModal = () => {\r\n        //reset state before closing\r\n        this.setState({\r\n            event: {\r\n                title: \"\",\r\n                start: '',\r\n                end: '',\r\n                startTime: '',\r\n                endTime: '',\r\n                people: '',\r\n                location: '',\r\n                description: ''\r\n            }\r\n        });\r\n        this.props.handleClose()\r\n    }\r\n    render() {\r\n        const { title, start, end, startTime, endTime, people, location, description } = this.state.event;\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered show={this.props.show} onHide={this.closeModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new event</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={(e) => this.handleAddUpdateEvent(e, Object.keys(this.props.event).length === 0 ? false : true)}>\r\n                            <Form.Group as={Row} controlId=\"title\">\r\n                                <Form.Label column sm=\"2\">Title</Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control required type=\"text\" placeholder=\"Event Title\" value={title} onChange={this.onChange} />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col}>\r\n                                    <Form.Group as={Row} controlId=\"start\">\r\n                                        <Form.Label column sm=\"4\">Start Date</Form.Label>\r\n                                        <Col sm=\"8\">\r\n                                            <Form.Control required type=\"date\" value={start} onChange={this.onChange} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col}>\r\n                                    <Form.Group as={Row} controlId=\"end\">\r\n                                        <Form.Label column sm=\"4\">End Date</Form.Label>\r\n                                        <Col sm=\"8\">\r\n                                            <Form.Control required type=\"date\" value={end} onChange={this.onChange} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} >\r\n                                    <Form.Group as={Row} controlId=\"startTime\">\r\n                                        <Form.Label column sm=\"4\">Begins</Form.Label>\r\n                                        <Col sm=\"8\">\r\n                                            <Form.Control type=\"time\" value={startTime} onChange={this.onChange} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} >\r\n                                    <Form.Group as={Row} controlId=\"endTime\">\r\n                                        <Form.Label column sm=\"4\">Ends</Form.Label>\r\n                                        <Col sm=\"8\">\r\n                                            <Form.Control type=\"time\" value={endTime} onChange={this.onChange} />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Group as={Row} controlId=\"people\">\r\n                                <Form.Label column sm=\"2\">\r\n                                    People\r\n                            </Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control type=\"text\" value={people} onChange={this.onChange} />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"location\">\r\n                                <Form.Label column sm=\"2\">\r\n                                    Location\r\n                            </Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control type=\"text\" value={location} onChange={this.onChange} />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"description\">\r\n                                <Form.Label column sm=\"2\">\r\n                                    Description\r\n                            </Form.Label>\r\n                                <Col sm=\"10\">\r\n                                    <Form.Control type=\"text\" value={description} onChange={this.onChange} />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Row>\r\n                                <Col align=\"center\">\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        {Object.keys(this.props.event).length === 0 ? \"Add\" : \"Update\"} Event\r\n                                </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {Object.keys(this.props.event).length !== 0 ? <Button variant=\"danger\" onClick={() => { this.props.deleteEvent(this.props.event); this.closeModal() }}>\r\n                            Delete\r\n                        </Button> : \"\"\r\n                        }\r\n                        <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                            Close\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\nexport default EventModal;\r\n","import React from 'react';\r\nimport Calendar from './components/Calendar';\r\nimport './main.scss';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Row, Navbar, Container, Col, ListGroup } from 'react-bootstrap';\r\nimport Modal from './components/EventModal';\r\nimport * as moment from 'moment';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // there is a bug with getting current data according to the timezone\r\n    this.state = {\r\n      date: new Date(),\r\n      //add some sample data if there is nothing saved in localStorage\r\n      events: localStorage.getItem('events') ? JSON.parse(localStorage.getItem('events')) : [],\r\n      today: [],\r\n      loadEvent: {},\r\n      show: false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getEvents(moment(new Date()).format('YYYY-MM-DD'));\r\n  }\r\n  //*************** Helper Functions **************/\r\n  getTime = date => {\r\n    return moment(date).format(\"hh:mm\");\r\n  }\r\n  getDate = date => {\r\n    return moment(date).format(\"YYYY-MM-DD\");\r\n  }\r\n  saveStateToLocalStorage = () => {\r\n    localStorage.setItem('events', JSON.stringify(this.state.events));\r\n  }\r\n  //*************************************************/\r\n\r\n  // update the state with the new event and make a copy of state to local storage for persistent data usage\r\n  addEvent = (event) => {\r\n    event.id = uuidv4();\r\n    this.setState(({ events }) => ({\r\n      events: [...events, event]\r\n    }), () => {\r\n      this.saveStateToLocalStorage();\r\n    })\r\n    this.getEvents(moment(new Date()).format('YYYY-MM-DD'));\r\n  }\r\n  deleteEvent = (event) => {\r\n    const newEvents = this.state.events.filter(e => e.id !== event.id);\r\n    this.setState({\r\n      events: newEvents\r\n    }, () => {\r\n      this.saveStateToLocalStorage();\r\n    })\r\n  }\r\n  updateEvent = (event) => {\r\n    const eventId = this.state.loadEvent.id\r\n    //remove the old event from the state\r\n    event.id = eventId;\r\n    this.deleteEvent(event);\r\n    //keep the previous Id and add the event\r\n    this.addEvent(event);\r\n  }\r\n\r\n  //add the prev\r\n  prepareEventUpdate = event => {\r\n    // filter the event that is being clicked by using it's id\r\n    const currentEvent = this.state.events.filter(e => e.id === event.id)[0];\r\n\r\n    currentEvent.startTime = this.getTime(currentEvent.start);\r\n    currentEvent.start = this.getDate(currentEvent.start);\r\n\r\n    currentEvent.endTime = this.getTime(currentEvent.end);\r\n    currentEvent.end = this.getDate(currentEvent.end);\r\n\r\n    this.setState({\r\n      loadEvent: currentEvent,\r\n      show: true\r\n    })\r\n  }\r\n  getEvents = date => {\r\n    const events = [];\r\n    this.state.events.forEach(event => {\r\n      if ((moment(event.start).isBefore(date) && moment(event.end).isAfter(date)) || moment(event.start, 'YYYY-MM-DD').isSame(date)) {\r\n        let start = event.start.slice(11, 16);\r\n        if (start === \"\") {\r\n          start = 'All Day'\r\n        }\r\n        events.push({ title: event.title, start });\r\n      }\r\n    })\r\n    this.setState({\r\n      today: events\r\n    })\r\n  }\r\n  changeDate = (date) => {\r\n    this.setState({\r\n      date: new Date(date + 'T00:00:00'),\r\n      show: false\r\n    })\r\n    this.getEvents(date);\r\n  }\r\n  handleShow = () => {\r\n    this.setState({\r\n      show: true\r\n    })\r\n  }\r\n  handleClose = () => {\r\n    this.setState({\r\n      loadEvent: {},\r\n      show: false\r\n    }, () => {\r\n      this.getEvents(moment(this.state.date).format('YYYY-MM-DD'));\r\n    })\r\n  }\r\n  render() {\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    return (\r\n      <>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col md={12}>\r\n              <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n                <Container>\r\n                  <Navbar.Brand href=\"#\"><h1>eCalendar</h1></Navbar.Brand>\r\n                </Container>\r\n              </Navbar>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"main-row\">\r\n            <Col xs={12} sm={12} md={8} lg={9} xl={6}>\r\n              <Calendar changeDate={this.changeDate} updateEvent={this.prepareEventUpdate} events={this.state.events} />\r\n            </Col>\r\n            <Col className=\"events-container\" md={4} lg={3}>\r\n              <div>\r\n                <h2>{days[this.state.date.getDay()]}</h2>\r\n                {/* The wrong date is being displayed might need to use moment.js or another library */}\r\n                <h1>{months[this.state.date.getMonth()]} {this.state.date.getDate()}</h1>\r\n              </div>\r\n              <ListGroup className=\"events-list\" >\r\n                {this.state.today.length ? this.state.today.map((event, i) => <ListGroup.Item key={i}><b>{event.start} </b> - {event.title}</ListGroup.Item>) : <ListGroup.Item>No Appoinments</ListGroup.Item>}\r\n              </ListGroup>\r\n              <Button onClick={this.handleShow}>Add</Button>\r\n              <Modal deleteEvent={this.deleteEvent} updateEvent={this.updateEvent} event={this.state.loadEvent} show={this.state.show} handleClose={this.handleClose} addEvent={this.addEvent} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}